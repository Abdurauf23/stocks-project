openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /users:
    get:
      tags:
        - user-controller
      description: List of all users in DB
      operationId: getAll
      responses:
        "403":
          description: "For user: User cannot access this function."
        "200":
          description: "For admin: List of all users in DB (JSON array)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockUser'
      security:
        - Bearer Authentication: []
    put:
      tags:
        - user-controller
      description: Update a user
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockUser'
        required: true
      responses:
        "200":
          description: User is successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockUser'
        "403":
          description: "For user: If user wants to PUT for another user."
        "404":
          description: "For administrator: No such user."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer Authentication: []
    post:
      tags:
        - user-controller
      description: Creating a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockUser'
        required: true
      responses:
        "201":
          description: "For admin: User is successfully created in DB "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockUser'
        "403":
          description: "For user: If user wants to create."
        "400":
          description: "For administrator: User should have first name."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer Authentication: []
  /security-info:
    get:
      tags:
        - security-info-controller
      description: List of all users security info in DB
      operationId: getAll_1
      responses:
        "200":
          description: "For admin: List of all users in DB (JSON array)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockUser'
        "403":
          description: "For user: User cannot see all security info."
      security:
        - Bearer Authentication: []
    put:
      tags:
        - security-info-controller
      description: Update security info for user.
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityInfo'
        required: true
      responses:
        "400":
          description: Email or username is already used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "403":
          description: "For user: If user wants to update another users security info."
        "404":
          description: "For administrator: No such user."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "200":
          description: Users security info is successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityInfo'
      security:
        - Bearer Authentication: []
    post:
      tags:
        - security-info-controller
      description: Creating a user
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityInfo'
        required: true
      responses:
        "400":
          description: Not enough data for registration OR Email or username is already
            used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "403":
          description: "For user: If user wants to create."
        "201":
          description: Security info is successfully created in DB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityInfo'
        "404":
          description: No User with this ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer Authentication: []
  /register:
    post:
      tags:
        - spring-security-controller
      description: Registration
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDTO'
        required: true
      responses:
        "400":
          description: Email or username is already used
        "201":
          description: Successfully registered.
  /fav-stocks:
    get:
      tags:
        - favourite-stocks-controller
      description: Get favorite stocks for particular stockUser.
      operationId: getFavouriteStocks
      responses:
        "403":
          description: "For User: If stockUser wants to see others favourite stocks"
        "200":
          description: "For Admin and User: Admin can access anyone. User can access\
            \ only his fav stocks."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockValue'
      security:
        - Bearer Authentication: []
    post:
      tags:
        - favourite-stocks-controller
      description: Add stocks to favourite.
      operationId: addStockToFavourite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteStockManipulationDTO'
        required: true
      responses:
        "201":
          description: "For Admin and User: Successfully added stock to the list of\
            \ fav. "
        "403":
          description: "For User: If user wants to add fav stock for other user"
        "404":
          description: "For Admin: If user was not found in the database. Or also\
            \ For Admin and User: If stock with provided name was not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer Authentication: []
    delete:
      tags:
        - favourite-stocks-controller
      description: Delete stock from the list of favourites.
      operationId: deleteFromFavourite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteStockManipulationDTO'
        required: true
      responses:
        "403":
          description: "For User: If user wants to delete fav stock for other user"
        "204":
          description: "For Admin and User: Successfully deleted stock from the list\
            \ of fav. "
        "404":
          description: "For Admin: If user was not found in the database. Or also\
            \ For Admin and User: If stock with provided name was not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      security:
        - Bearer Authentication: []
  /authentication:
    post:
      tags:
        - spring-security-controller
      description: Authentication
      operationId: generateToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        "200":
          description: Successfully authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "401":
          description: Incorrect credentials.
  /users/{userId}:
    get:
      tags:
        - user-controller
      description: Get user with particular ID.
      operationId: getById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: If user is found in DB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockUser'
        "404":
          description: "For administrator: No such stockUser in DB."
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "403":
          description: "For user: If user wants to access another user."
      security:
        - Bearer Authentication: []
    delete:
      tags:
        - user-controller
      description: Deleting a User
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "403":
          description: "For user: If user wants to delete another user."
        "404":
          description: "For administrator: No such user."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "204":
          description: User is successfully deleted
      security:
        - Bearer Authentication: []
  /users/me:
    get:
      tags:
        - user-controller
      operationId: getSelf
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
        - Bearer Authentication: []
  /stocks:
    get:
      tags:
        - stock-controller
      description: List of stocks available.
      operationId: getAllStocks
      responses:
        "200":
          description: Get list of stocks (JSON Array).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockMetaData'
      security:
        - Bearer Authentication: []
  /stocks/{symbol}:
    get:
      tags:
        - stock-controller
      description: "Get value for {symbol}."
      operationId: getStock
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        "404":
          description: No stock with this name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "200":
          description: Get requested stock.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockData'
      security:
        - Bearer Authentication: []
  /security-info/{userId}:
    get:
      tags:
        - security-info-controller
      description: Get security info for particular user.
      operationId: getById_1
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "404":
          description: "For administrator: No such user in DB."
          content:
            application.json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "403":
          description: "For user: If user wants to access another users security info."
        "200":
          description: User is found in DB.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityInfo'
      security:
        - Bearer Authentication: []
    delete:
      tags:
        - security-info-controller
      description: Deleting a Security info for User
      operationId: delete
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Security info is successfully deleted
        "404":
          description: "For admin: No such user."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        "403":
          description: "For user: If user wants to delete another users security info."
      security:
        - Bearer Authentication: []
components:
  schemas:
    StockUser:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        firstName:
          type: string
        secondName:
          type: string
        birthday:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: boolean
    ErrorModel:
      type: object
      properties:
        error:
          type: string
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    SecurityInfo:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
        enabled:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        credentialsNonExpired:
          type: boolean
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
    UserRegistrationDTO:
      type: object
      properties:
        firstName:
          type: string
        secondName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        birthday:
          type: string
          format: date-time
    FavouriteStockManipulationDTO:
      type: object
      properties:
        symbol:
          type: string
        userId:
          type: integer
          format: int32
    AuthRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    StockMetaData:
      type: object
      properties:
        symbol:
          type: string
        interval:
          type: string
        currency:
          type: string
        exchangeTimezone:
          type: string
        exchange:
          type: string
        micCode:
          type: string
        type:
          type: string
    StockData:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/StockMetaData'
        values:
          type: array
          items:
            $ref: '#/components/schemas/StockValue'
        status:
          type: string
    StockValue:
      type: object
      properties:
        datetime:
          type: string
        open:
          type: number
          format: double
        high:
          type: number
          format: double
        low:
          type: number
          format: double
        close:
          type: number
          format: double
        volume:
          type: integer
          format: int32
  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
