openapi: 3.0.1
info:
  title: Title
  description: Some description
  version: "1.1"
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /users/{userId}:
    get:
      tags:
        - user-controller
      operationId: getById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - user-controller
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /security-info/{userId}:
    get:
      tags:
        - security-controller
      operationId: getById_1
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
        - security-controller
      operationId: update
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityInfo'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
        - security-controller
      operationId: create
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecurityInfo'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - security-controller
      operationId: delete
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /users:
    get:
      tags:
        - user-controller
      operationId: getAll
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /register:
    post:
      tags:
        - spring-security-controller
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSecurityDTO'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /fav-stocks/{userId}/{stockName}:
    post:
      tags:
        - favourite-stocks
      operationId: addStockToFavourite
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: stockName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
        - favourite-stocks
      operationId: deleteFromFavourite
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: stockName
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /authentication:
    post:
      tags:
        - spring-security-controller
      operationId: generateToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /stocks:
    get:
      tags:
        - stock-controller
      operationId: getAllStocks
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /stocks/{symbol}:
    get:
      tags:
        - stock-controller
      operationId: getStock
      parameters:
        - name: symbol
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /security-info:
    get:
      tags:
        - security-controller
      operationId: getAll_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SecurityInfo'
  /fav-stocks/{userId}:
    get:
      tags:
        - favourite-stocks
      operationId: getFavouriteStocks
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        firstName:
          type: string
        secondName:
          type: string
        birthday:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deleted:
          type: boolean
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    SecurityInfo:
      type: object
      properties:
        userId:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
        enabled:
          type: boolean
        credentialsNonExpired:
          type: boolean
        accountNonExpired:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonLocked:
          type: boolean
    UserSecurityDTO:
      type: object
      properties:
        firstName:
          type: string
        secondName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        birthday:
          type: string
          format: date-time
    AuthRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
